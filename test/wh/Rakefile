# Get common recipes
recipes = ENV['fsa'] + '/PlotTools/rake/recipes.rake'
import recipes

$jobid = ENV['jobid']

# Figure out what run period we are in
$period = '7TeV'
if $period.include? '8TeV'
  $period = '8TeV'
end

################################################################################
## Refreshing cython proxies ###################################################
################################################################################


################################################################################
## Sample names ################################################################
################################################################################
#
# Get sample names containing a substring
def get_sample_names(substring)
  inputs = Dir.glob("inputs/#{$jobid}/*.txt").select {|x| x.include? substring}
  inputs = inputs.map{|x| File.basename(x).sub(".txt", "")}
  return inputs
end

#puts get_sample_names('data_DoubleMu')

samples = Hash[
  "ewk" => Array['Zjets_M50', 'WplusJets_madgraph', 
    'ZZJetsTo4L_pythia',
    'TTplusJets_madgraph'] + get_sample_names('WZ'),
  "wjets" => Array['WplusJets_madgraph'],
  "zjets" => Array['Zjets_M50'],
  "signal" => get_sample_names('VH'),
  # Automagically figure out what data samples we have
  "data_mm" =>  get_sample_names("data_DoubleMu"),
  "data_em" => get_sample_names("data_MuEG"),
  "data_ee" => get_sample_names("data_DoubleElectron"),
]

# Function to get the .root files for an analyzer and samples
def get_analyzer_results(analyzer, the_samples)
  output = Array.new
  analyzer_base = analyzer.sub('.py', '')
  the_samples.each do |sample|
    output << "results/#{$jobid}/#{analyzer_base}/#{sample}.root"
  end
  return output
end

################################################################################
## Recipes to measure fake rates 
##  targets:
##     fakerates - measure all fakerates
################################################################################

# Map which samples need to be analyzed by which analyzer
fr_analyzer_sample_map = Hash[
  "FakeRatesMM.py" => samples['wjets'] + samples['data_mm'],
  "FakeRatesEM.py" => samples['wjets'] + samples['data_em'],
  "FakeRatesEE.py" => samples['wjets'] + samples['zjets'] + samples['data_ee'],
  "FakeRatesMMT.py" => samples['zjets'] + samples['data_mm'],
]

# Create an empty placeholder to enable tab-completion
task :fakerates => []

# Create tasks for each sample + analyzer
fr_analyzer_sample_map.each do |analyzer, the_samples|
  puts "Creating tasks for analyzer: #{analyzer}"
  get_analyzer_results(analyzer, the_samples).each do |result|
    task :fakerates => result
  end
end

################################################################################
## Recipes to fit fake rates
##  targets:
##     fits
################################################################################

# Output directory
$frfit_dir = "results/#{$jobid}/fakerate_fits"
directory $frfit_dir

# Common fit functions
exponential = "scale*TMath::Exp(x*decay)+offset"
exponential_vars =  "scale[0.5, 0, 5],decay[-1e-2, -1, -1e-4],offset[1e-2, 0, 0.5]"

landau = "scale*TMath::Landau(x,mu,sigma,0)+offset"
landau_vars =  "scale[0.5, 0, 5],mu[5, 0, 100],sigma[1.9, 0.1, 20],offset[1e-2, 0, 0.5]"

# Fake rate fit configurations
fr_fits = Hash[
  # Format is type_region_denom_num_variable
  "e_wjets_pt10_mvaidiso03_eJetPt" => Hash[
    "samples" => Array["wjets", "data_em"],
    "analyzer" => "FakeRatesEM",
    "function" => landau,
    "variables" => landau_vars,
    "rebin" => 5,
  ],
  "e_wjets_pt10_mvaidiso01_eJetPt" => Hash[
    "samples" => Array["wjets", "data_em"],
    "analyzer" => "FakeRatesEM",
    "function" => landau,
    "variables" => landau_vars,
    "rebin" => 5,
  ],
  "ee_wjets_pt20_mvaidiso03_e2JetPt" => Hash[
    "samples" => Array["wjets", "data_ee"],
    "analyzer" => "FakeRatesEE",
    "function" => landau,
    "variables" => landau_vars,
    "rebin" => 5,
  ],
  "ee_wjets_pt20_mvaidiso01_e2JetPt" => Hash[
    "samples" => Array["wjets", "data_ee"],
    "analyzer" => "FakeRatesEE",
    "function" => landau,
    "variables" => landau_vars,
    "rebin" => 5,
  ],
  "ee_wjets_pt10_mvaidiso03_e2JetPt" => Hash[
    "samples" => Array["wjets", "data_ee"],
    "analyzer" => "FakeRatesEE",
    "function" => landau,
    "variables" => landau_vars,
    "rebin" => 5,
  ],
  "m_wjets_pt10_pfidiso01_muonJetPt" => Hash[
    "samples" => Array["wjets", "data_mm"],
    "analyzer" => "FakeRatesMM",
    #"function" => exponential,
    #"variables" => exponential_vars,
    "function" => landau,
    "variables" => landau_vars,
    "rebin" => 5,
  ],
  "m_wjets_pt10_pfidiso03_muonJetPt" => Hash[
    "samples" => Array["wjets", "data_mm"],
    "analyzer" => "FakeRatesMM",
    #"function" => exponential,
    #"variables" => exponential_vars,
    "function" => landau,
    "variables" => landau_vars,
    "rebin" => 5,
  ],
  "m_wjets_pt20_pfidiso03_muonJetPt" => Hash[
    "samples" => Array["wjets", "data_mm"],
    "analyzer" => "FakeRatesMM",
    #"function" => exponential,
    #"variables" => exponential_vars,
    "function" => landau,
    "variables" => landau_vars,
    "rebin" => 5,
  ],
  "t_ztt_pt20_mvaloose_tauPt" => Hash[
    "samples" => Array["zjets", "data_mm"],
    "analyzer" => "FakeRatesMMT",
    "function" => exponential,
    "variables" => exponential_vars,
    "rebin" => 5,
  ],
  "t_ztt_pt20_hpsloose_tauPt" => Hash[
    "samples" => Array["zjets", "data_mm"],
    "analyzer" => "FakeRatesMMT",
    "function" => exponential,
    "variables" => exponential_vars,
    "rebin" => 5,
  ],
]

# Placeholder
multitask :fits => []

# Create tasks for all the fr_fits
fr_fits.each do |fit, fit_info|
  fit_configuration = fit.split("_")
  region = fit_configuration[1]
  denom = fit_configuration[2]
  num = fit_configuration[3]
  var = fit_configuration[4]
  fit_info['samples'].each do |sample|
    fit_output = $frfit_dir + "/#{fit}-#{sample}.root"
    subsamples_inputs = samples[sample].map{|x|  "results/#{$jobid}/#{fit_info['analyzer']}/#{x}.root"}
    subsample_input_list = subsamples_inputs.join(" ")

    # Path to histograms in root files
    denom_path = Array[region, denom, var].join("/")
    num_path = Array[region, denom, num, var].join("/")

    task fit_output => subsamples_inputs + [fit_info['analyzer'] + '.py', $frfit_dir] do |t|
      sh "fit_efficiency.py #{fit_output} #{num_path} #{denom_path} \'#{fit_info['function']}\' \'#{fit_info['variables']}\' #{subsample_input_list} --plot --rebin #{fit_info['rebin']}"
    end
    multitask :fits => fit_output
  end
end

################################################################################
## Recipes to analyze WH
##  targets:
##     mmt
################################################################################

task :mmt => get_analyzer_results("WHAnalyzeMMT.py", samples['ewk'] + samples['data_mm'] + samples['signal'])

task :emt => get_analyzer_results("WHAnalyzeEMT.py", samples['ewk'] + samples['data_em'] + samples['signal'])

task :eet => get_analyzer_results("WHAnalyzeEET.py", samples['ewk'] + samples['data_ee'] + samples['signal'])

################################################################################
# Recipes to make data cards (plots come for free)
#  targets:
#      mmt_shapes
#      emt_shapes
#      eet_shapes
#      cards
################################################################################


# Output directories
$mmtdir = "results/#{$jobid}/plots/mmt/"
$emtdir = "results/#{$jobid}/plots/emt/"
$eetdir = "results/#{$jobid}/plots/eet/"

directory $mmtdir
directory $eetdir

# Recipes for adding stat. error shapes.  Makes a new file task:
# input_file_stat_errors.root => input_file.root
def add_fake_errors(input_file, prefix)
  output_file = input_file.sub('.root', '_statshapes.root')
  output_sys_list = input_file.sub('.root', '_statshapes.txt')
  file output_file => [input_file] do |t|
    sh "$CMSSW_BASE/src/HiggsAnalysis/HiggsToTauTau/scripts/add_stat_shapes.py #{input_file} #{output_file} --filter '*fakes' --prefix CMS_vhtt_#{prefix}_fakeshape > #{output_sys_list}"
  end
end

# The .root files with the shapes
file "#{$mmtdir}/mmt_shapes_#{$period}.root" => [:mmt, 'WHPlotterMMT.py', 'WHPlotterBase.py', $mmtdir] do |t|
  sh "python WHPlotterMMT.py"
end
add_fake_errors("#{$mmtdir}/mmt_shapes_#{$period}.root", "mmt")
task :mmt_shapes => ["#{$mmtdir}/mmt_shapes_#{$period}_statshapes.root" ]

file "#{$emtdir}/emt_shapes_#{$period}.root" => [:emt, 'WHPlotterEMT.py', 'WHPlotterBase.py', $emtdir] do |t|
  sh "python WHPlotterEMT.py"
end
add_fake_errors("#{$emtdir}/emt_shapes_#{$period}.root", "emt")
task :emt_shapes => ["#{$emtdir}/emt_shapes_#{$period}_statshapes.root" ]

$carddir = "vhtt_lep_cards_#{$period}"

# Combine all category shape files into the datacard project
file "#{$carddir}/shapes.root" => ["#{$mmtdir}/mmt_shapes_#{$period}_statshapes.root", "#{$emtdir}/emt_shapes_#{$period}_statshapes.root"] do |t|
  sh "hadd -f #{t.name} #{t.prerequisites.join(' ')}"
end

stat_shape_lists = Dir.glob("results/#{$jobid}/plots/*/*_statshapes.txt")
# We make these the dependency, since they are always rpoduced w/ the .txt lists
stat_shapes = Dir.glob("results/#{$jobid}/plots/*/*_statshapes.root")

# We need to build the unc.conf and unc.vals with our stat shapes
file "#{$carddir}/unc.conf" => ["#{$carddir}/unc.conf.base"] + stat_shapes do |t|
  # Copy the basic template
  sh "cp #{t.prerequisites[0]} #{t.name}"
  # Append all the stat shape types
  sh "echo '' >> #{t.name}"
  sh "echo '# Stat shape uncertainties' >> #{t.name}"
  stat_shape_lists.each do |list|
    sh "cat #{list} | xargs -n 1 -I {} echo '{} shape' >> #{t.name}"
  end
end

file "#{$carddir}/unc.vals" => ["#{$carddir}/unc.vals.base"] + stat_shapes do |t|
  # Copy the basic template
  sh "cp #{t.prerequisites[0]} #{t.name}"
  # Append all the stat shape types
  sh "echo '' >> #{t.name}"
  sh "echo '# Stat shape uncertainties' >> #{t.name}"
  stat_shape_lists.each do |list|
    sh "cat #{list} | grep mmt | xargs -n 1 -I {} echo 'mmt fakes {} 1.0' >> #{t.name}"
    sh "cat #{list} | grep emt | xargs -n 1 -I {} echo 'emt fakes {} 1.0' >> #{t.name}"
  end
end

cardmasses = Array[120]

def make_datacard_task(mass)
  card = "#{$carddir}/vhtt_0_#{mass}.txt"  
  file card => ["#{$carddir}/shapes.root", "#{$carddir}/unc.conf", "#{$carddir}/unc.vals", "#{$carddir}/cgs.conf"] do |t|
    chdir($carddir) do
      sh "create-datacard.py -i shapes.root -o vhtt_0_#{mass}.txt #{mass}"
      # text2workspace.py  -m 125.5 vhtt_0_7TeV.txt -P HiggsAnalysis.CombinedLimit.PhysicsModel:strictSMLikeHiggs -o tmp.root
    end
  end
  return card
end

task :cards => []

cardmasses.each do |mass|
  task :cards => make_datacard_task(mass)
end

