# Get common recipes
recipes = ENV['fsa'] + '/PlotTools/rake/recipes.rake'
import recipes

$jobid = ENV['jobid']

################################################################################
## Refreshing cython proxies ###################################################
################################################################################

################################################################################
## Sample names ################################################################
################################################################################
#
# Get sample names containing a substring
def get_sample_names(substring)
  inputs = Dir.glob("inputs/#{$jobid}/*.txt").select {|x| x.include? substring}
  inputs = inputs.map{|x| File.basename(x).sub(".txt", "")}
  return inputs
end

puts get_sample_names('data_DoubleMu')

samples = Hash[
  "ewk" => Array['Zjets_M50', 'WplusJets_madgraph', 
    #'WZJetsTo3LNu', 
    'TTplusJets_madgraph'],
  "wjets" => Array['WplusJets_madgraph'],
  "zjets" => Array['Zjets_M50'],
  # Automagically figure out what data samples we have
  "data_mm" =>  get_sample_names("data_DoubleMu"),
  "data_em" => get_sample_names("data_DoubleElectron"),
]

# Function to get the .root files for an analyzer and samples
def get_analyzer_results(analyzer, the_samples)
  output = Array.new
  analyzer_base = analyzer.sub('.py', '')
  the_samples.each do |sample|
    output << "results/#{$jobid}/#{analyzer_base}/#{sample}.root"
  end
  return output
end

################################################################################
## Recipes to measure fake rates 
##  targets:
##     fakerates - measure all fakerates
################################################################################

# Map which samples need to be analyzed by which analyzer
fr_analyzer_sample_map = Hash[
  "FakeRatesMM.py" => samples['ewk'] + samples['data_mm'],
  #"FakeRatesEM.py" => samples['ewk'] + samples['data_em'],
  "FakeRatesMMT.py" => samples['ewk'] + samples['data_mm'],
]

# Create an empty placeholder to enable tab-completion
task :fakerates => []

# Create tasks for each sample + analyzer
fr_analyzer_sample_map.each do |analyzer, the_samples|
  puts "Creating tasks for analyzer: #{analyzer}"
  get_analyzer_results(analyzer, the_samples).each do |result|
    task :fakerates => result
  end
end

################################################################################
## Recipes to fit fake rates
##  targets:
##     fits
################################################################################

# Output directory
$frfit_dir = "results/#{$jobid}/fakerate_fits"
directory $frfit_dir

# Common fit functions
exponential = "scale*TMath::Exp(x*decay)+offset"
exponential_vars =  "scale[0.5, 0, 5],decay[-1e-2, -1, -1e-4],offset[1e-2, 0, 0.5]"

landau = "scale*TMath::Landau(x,mu,sigma,0)+offset"
landau_vars =  "scale[0.5, 0, 5],mu[20, 5, 100],sigma[1.9, 0.1, 20],offset[1e-2, 0, 0.5]"

# Fake rate fit configurations
fr_fits = Hash[
  # Format is type_region_denom_num_variable
  #"e_wjets_pt10_mvaidiso03_electronJetPt" => Hash[
    #"samples" => Array["wjets", "data_em"],
    #"analyzer" => "FakeRatesEM",
    #"function" => exponential,
    #"variables" => exponential_vars,
    #"rebin" => 5,
  #],
  #"e_wjets_pt10_mvaidiso01_electronJetPt" => Hash[
    #"samples" => Array["wjets", "data_em"],
    #"analyzer" => "FakeRatesEM",
    #"function" => exponential,
    #"variables" => exponential_vars,
    #"rebin" => 5,
  #],
  "m_wjets_pt10_pfidiso01_muonJetPt" => Hash[
    "samples" => Array["wjets", "data_mm"],
    "analyzer" => "FakeRatesMM",
    #"function" => exponential,
    #"variables" => exponential_vars,
    "function" => landau,
    "variables" => landau_vars,
    "rebin" => 5,
  ],
  "m_wjets_pt10_pfidiso03_muonJetPt" => Hash[
    "samples" => Array["wjets", "data_mm"],
    "analyzer" => "FakeRatesMM",
    #"function" => exponential,
    #"variables" => exponential_vars,
    "function" => landau,
    "variables" => landau_vars,
    "rebin" => 5,
  ],
  "m_wjets_pt20_pfidiso03_muonJetPt" => Hash[
    "samples" => Array["wjets", "data_mm"],
    "analyzer" => "FakeRatesMM",
    #"function" => exponential,
    #"variables" => exponential_vars,
    "function" => landau,
    "variables" => landau_vars,
    "rebin" => 5,
  ],
  "t_ztt_pt20_mvaloose_tauPt" => Hash[
    "samples" => Array["zjets", "data_mm"],
    "analyzer" => "FakeRatesMMT",
    "function" => exponential,
    "variables" => exponential_vars,
    "rebin" => 5,
  ],
  "t_ztt_pt20_hpsloose_tauPt" => Hash[
    "samples" => Array["zjets", "data_mm"],
    "analyzer" => "FakeRatesMMT",
    "function" => exponential,
    "variables" => exponential_vars,
    "rebin" => 5,
  ],
]

# Placeholder
task :fits => []

# Create tasks for all the fr_fits
fr_fits.each do |fit, fit_info|
  fit_configuration = fit.split("_")
  region = fit_configuration[1]
  denom = fit_configuration[2]
  num = fit_configuration[3]
  var = fit_configuration[4]
  fit_info['samples'].each do |sample|
    fit_output = $frfit_dir + "/#{fit}-#{sample}.root"
    subsamples_inputs = samples[sample].map{|x|  "results/#{$jobid}/#{fit_info['analyzer']}/#{x}.root"}
    subsample_input_list = subsamples_inputs.join(" ")

    # Path to histograms in root files
    denom_path = Array[region, denom, var].join("/")
    num_path = Array[region, denom, num, var].join("/")

    task fit_output => subsamples_inputs + [fit_info['analyzer'] + '.py', $frfit_dir] do |t|
      sh "fit_efficiency.py #{fit_output} #{num_path} #{denom_path} \'#{fit_info['function']}\' \'#{fit_info['variables']}\' #{subsample_input_list} --plot --rebin #{fit_info['rebin']}"
    end
    task :fits => fit_output
  end
end

################################################################################
## Recipes to analyze WH
##  targets:
##     mmt
################################################################################

analysis_sample_map = Hash[
  "WHAnalyzeMMT.py" => samples['ewk'] + samples['data_mm'],
  "WHAnalyzeEMT.py" => samples['ewk'] + samples['data_em'],
]

task :mmt => get_analyzer_results("WHAnalyzeMMT.py", samples['ewk'] + samples['data_mm'])

task :emt => get_analyzer_results("WHAnalyzeEMT.py", samples['ewk'] + samples['data_em'])
